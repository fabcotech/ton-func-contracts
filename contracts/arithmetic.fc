#include "imports/stdlib.fc";

const op::increase = "op::increase"c; ;;0x7e8764ef
const op::decrease = "op::decrease"c; ;;0xe78525c4
const op::multiply = "op::multiply"c; ;;0x6f6bc17a

;; storage variables
global int ctx_counter;

() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_counter = ds~load_uint(32);

    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_counter, 32)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { 
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ctx_counter += increase_by;
        save_data();
        return ();
    }
    if (op == op::decrease) {
        int decrease_by = in_msg_body~load_uint(32);
        ctx_counter -= decrease_by;
        save_data();
        return ();
    }
    if (op == op::multiply) {
        int multiply_by = in_msg_body~load_uint(32);
        ctx_counter *= multiply_by;
        save_data();
        return ();
    }

    throw(0xffff);
}

int get_counter() method_id {
    load_data();
    return ctx_counter;
}
