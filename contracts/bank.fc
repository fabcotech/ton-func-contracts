#include "imports/stdlib.fc";

;; storage variables
global cell ctx_balance;

() load_data() impure {
  var ds = get_data().begin_parse();
  ctx_balance = ds~load_ref();
  ds.end_parse();
}

() save_data(int coins) impure {
  set_data(
    begin_cell()
      .store_ref(
        begin_cell()
          .store_coins(coins)
          .end_cell()
      )
      .end_cell()
  );
}

() send_money(slice address, int amount) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce
    .store_slice(address)
    .store_coins(amount)
    .end_cell();

  send_raw_message(msg, 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {


  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) { 
    return ();
  }

  load_data();
  slice current = ctx_balance.begin_parse();
  (_, int current_balance) = current.load_coins();

  ~strdump("mybalance1");
  ~dump(my_balance);

  if (msg_value != 0) {
    ;; if balance > 1B limit
    ;; 1B TON to user 2
    if (my_balance > 1000000000) {
      send_money("EQBOo7szgjcz5rYICfwEpHALKKP8QDXwRqKVY7w5axLDcEfY", 1000000000);
      save_data(my_balance);
    } else {
      save_data(my_balance);
    }

    return ();
  }

  throw(0xffff);
}

cell get_bal() method_id {
  load_data();
  return ctx_balance;
}
