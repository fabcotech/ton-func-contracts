#include "imports/stdlib.fc";

int slice_hash(slice s) asm "HASHSU";
int equal_slices(slice a, slice b) asm "SDEQ";

;; storage variables
global cell ctx_str;

() load_data() impure {
  var ds = get_data().begin_parse();
  ctx_str = ds~load_ref();
  ds.end_parse();
}

() save_data() impure {
  set_data(
    begin_cell()
      .store_ref(ctx_str)
      .end_cell()
  );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  load_data();
  slice current = ctx_str.begin_parse();
  slice ping = begin_cell().store_slice("ping").end_cell().begin_parse();

  if (equal_slices(current,ping) == -1) {
    cell c = begin_cell().store_slice("pong").end_cell();
    ctx_str = c;
    save_data();
    return ();
  } else  {
    cell c = begin_cell().store_slice("ping").end_cell();
    ctx_str = c;
    save_data();
    return ();
  }
}

cell get_str() method_id {
  load_data();
  return ctx_str;
}